#!/usr/bin/env ruby
require "zajal"
require "capuchin"

class Rubinius::CompiledCode
  # Support & operator
  def to_proc
    self.scope = Rubinius::StaticScope.new(Object) unless self.scope
    be = Rubinius::BlockEnvironment.new
    be.under_context Rubinius::VariableScope.of_sender, self
    Proc.__from_block__ be
  end
end

class Zajal::Frontends::Glfw
  class CapuchinSketch < Sketch
    def self.bare? code
      false
    end

    def execute code
      # parse and execute js
      ctx = Capuchin::Context.new
      user_code = ctx.compile(ctx.parse_expression(code), "?")

      # capuchin compiles code into a 'call' method. extract child methods from it
      user_code.method(:call).executable.child_methods.each do |cm|
        self.send cm.name, &cm if @@supported_events.member? cm.name
      end
    end

  end
end

# expose Zajal to Capuchin
Zajal::Sketch.instance_methods.each do |meth|
  prc = proc { |*args| Zajal::Sketch.current.send meth, *args }
  Capuchin::Globals[meth] = Capuchin::Function.new(&prc)
end

# Run Capuchin sketch
fe = Zajal::Frontends::Glfw.new 500, 500
fe.sketch = Zajal::Frontends::Glfw::CapuchinSketch.new open(ARGV.first)
fe.run